/* Compiler.java */
/* Generated By:JavaCC: Do not edit this line. Compiler.java */
package Compiler;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Scanner;
import Execute.*;
import java.io.FileNotFoundException;
//java -cp bootstrap/javacc.jar javacc xxx.jj.
public class Compiler implements CompilerConstants {
    /** 全局变量*/
    public static ArrayList<SymbolItem> outList = new ArrayList();
    /** 函数及其变量*/
    public static ArrayList<ArrayList<SymbolItem>> partList = new ArrayList();
    /** 超前调用函数表*/
    public static ArrayList<SymbolItem> advanceList = new ArrayList();
    /** 中间指令序列 */
    public static ArrayList<Instruction> middleCodeList = new ArrayList();
    /** 返回标志 */
    public static boolean returnFlag = false;
    public static int returnFlagType = 0;
    private static boolean mid=false;
    private static boolean sub_program=false;
    private static boolean execute=false;
    private static String outPath="";
     private static boolean numflag=true;
    /** Main entry point. */
    public static void main(String args[]) throws ParseException {
        try {
            System.out.println("欢迎使用C0编译器,请输入源代码地址:");
            Scanner scanner=new Scanner(System.in);
            String s=scanner.nextLine();
            InputStream inputstream = new FileInputStream(s);
            Compiler compiler = new Compiler(inputstream);
            try {
                String result="";
                while(!result.equals("y")&&!result.equals("Y")&&!result.equals("n")&&!result.equals("N"))
                {
                    System.out.println("是否输出中间代码？:y/n");
                    result=scanner.nextLine();
                    if(result.equals("y")||result.equals("Y"))
                    {
                        mid=true;
                    }
                    else if(result.equals("n")||result.equals("N"))
                    {
                        mid=false;
                    }
                    else
                    {
                        System.err.println("输入错误，请重新输入！");
                    }
                }
                result="";

                while(!result.equals("y")&&!result.equals("Y")&&!result.equals("n")&&!result.equals("N"))
                {
                    System.out.println("是否输出分程序列表？:y/n");
                    result=scanner.nextLine();
                    if(result.equals("y")||result.equals("Y"))
                    {
                        sub_program=true;
                    }
                    else if(result.equals("n")||result.equals("N"))
                    {
                        sub_program=false;
                    }
                    else
                    {
                        System.err.println("输入错误，请重新输入！");
                    }
                }
                result="";
                while(!result.equals("y")&&!result.equals("Y")&&!result.equals("n")&&!result.equals("N"))
                {
                    System.out.println("是否直接解释执行?:y/n");
                    result=scanner.nextLine();
                    if(result.equals("y")||result.equals("Y"))
                    {
                        execute=true;
                    }
                    else if(result.equals("n")||result.equals("N"))
                    {
                        execute=false;
                    }
                    else
                    {
                        System.err.println("输入错误，请重新输入！");
                    }
                }
                System.out.println("请输入目标文件输出路径:");
                outPath=scanner.nextLine();
                compiler.start();
                if(!MyError.errFlag)
                {
                    outPutMiddleCodeList();
                    outPutPartList();
                    writeMiddleCodeList();
                    System.out.println("编译完成!");
                    execute();
                }

            }
            catch (ParseException e)
            {
                System.err.println(e);
            }
        }
        catch (FileNotFoundException e){
            MyError.ShowErrMsg(2,"目标文件不存在!");
        }
    }
    /**
    * 创建变量
    * @param type 0-全局变量 1-函数内部变量
    */
    public static void createSymbol(Token t,int type){
        SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.intSym);
        symbolItem.setName(t.image);
        symbolItem.setLevel(type);
        if(type==0){
            for(int i=0;i<outList.size();i++){
                if(outList.get(i).getName().equals(symbolItem.getName())){
                    MyError.ShowErrMsg(3,"变量["+symbolItem.getName()+"]已经定义！");
                }
            }
            outList.add(symbolItem);
        }
        else{
            ArrayList<SymbolItem> fun=partList.get(partList.size()-1);
               for(int i=0;i<fun.size();i++){
                   if(fun.get(i).getName().equals(symbolItem.getName())){
                       MyError.ShowErrMsg(3,"变量["+symbolItem.getName()+"]已经定义！");
                   }
               }
               fun.add(symbolItem);
           }
       }
    /**
    * 创建函数并检查超前调用
    * @param type 1-return int  0-return void
    */
    public static void createFunction(Token t,int type){
        SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
        symbolItem.setName(t.image);
        symbolItem.setReturnType(type);
        symbolItem.setAdr(middleCodeList.size());
        ArrayList<SymbolItem> list=new ArrayList();
        list.add(symbolItem);
        partList.add(list);

        //超前调用
        for(int i=0;i<advanceList.size();i++){
            if(advanceList.get(i).getName().equals(t.image)){
                SymbolItem sym = advanceList.get(i);
                middleCodeList.get(sym.getAdr()).a = middleCodeList.size();
                advanceList.remove(i);
                i--;
            }
        }
    }
    /**
    * 生成开辟空间指令
    * @param type 0-全局变量 1-函数内部变量
    */
    public static void createSymbolSpace(int type){
        if(type==0){
            Instruction item = new Instruction(InstructionName.INT,0,outList.size());
            middleCodeList.add(item);
        }else{
            ArrayList<SymbolItem> list=partList.get(partList.size()-1);
            Instruction item = new Instruction(InstructionName.INT,0,list.size()-1);
            middleCodeList.add(item);
        }
    }
    /**
    * 根据名字查找变量并生成操作指令
    * @param type 0-取变量 1-存变量
    */
    public static void getVariableByName(Token t, int type){
        String id = t.image;
        boolean isFind = false;
        int relative = 1;
        ArrayList<SymbolItem> fun=partList.get(partList.size()-1);
        for(int i=0;i<fun.size();i++){
            relative++;
            if(fun.get(i).getName().equals(id)){
                isFind = true;
                break;
            }
        }
        if(isFind){
            if(type==0){
                Instruction item = new Instruction(InstructionName.LOD,0,relative-1);
                middleCodeList.add(item);
            }else{
                Instruction item = new Instruction(InstructionName.STO,0,relative-1);
                middleCodeList.add(item);
            }
        }else{
            relative=-1;
            for(int i=0;i<outList.size();i++){
                relative++;
                if(outList.get(i).getName().equals(id)){
                    if(type==0){
                        Instruction item = new Instruction(InstructionName.LOD,1,relative);
                        middleCodeList.add(item);
                    }else{
                        Instruction item = new Instruction(InstructionName.STO,1,relative);
                        middleCodeList.add(item);
                    }
                    return;
                }
            }
            MyError.ShowErrMsg(3,"变量["+id+"]不存在");
        }
    }
    /**
    * 根据函数名字查找函数并生成调用函数指令
    */
    public static void getFunctionByName(Token t){
        for(int i=0;i<partList.size();i++){
           ArrayList<SymbolItem> fun=partList.get(i);
           if(fun.get(0).getName().equals(t.image)){
               Instruction Instruction = new Instruction(InstructionName.CAL,0,fun.get(0).getAdr());
               middleCodeList.add(Instruction);
               return;
           }
        }
        //如果单词表中没有该函数，则进行超前调用
        SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
        symbolItem.setName(t.image);
        symbolItem.setAdr(middleCodeList.size());
        advanceList.add(symbolItem);
        Instruction Instruction = new Instruction(InstructionName.CAL,0,0);
        middleCodeList.add(Instruction);
    }

    /**
    * 生成调用主函数代码
    */
    public static void callMainFunction(){
        Instruction item = new Instruction(InstructionName.CAL,0,0);
        middleCodeList.add(item);
        Instruction item2 = new Instruction(InstructionName.RET,0,0);
        middleCodeList.add(item2);
    }
    /**
    * 输出中间指令至屏幕
    */
    public static void outPutMiddleCodeList(){
        if(mid)
        {
            System.out.println("编译生成的中间代码序列如下:");
            for(int i=0;i<middleCodeList.size();i++){
                Instruction m = middleCodeList.get(i);
                System.out.println("**"+i+"\t"+m.toOutString());
            }
        }
    }
    /**
    * 输出分程序列表
    */
    public static void outPutPartList(){
        if(sub_program)
        {
            System.out.println("分程序序列表如下:");
            for(int i=0;i<partList.size();i++)
            {
                System.out.println("----Function"+i+":");
                ArrayList<SymbolItem> fun=partList.get(i);
                for(int j=0;j<fun.size();j++){
                    System.out.println("--"+j+"\t"+fun.get(j).toString());
                }
            }
        }
    }
    /**
    * 输出目标代码
    */
    public static void writeMiddleCodeList(){
        FileOutputStream out;
        try{
            out = new FileOutputStream(outPath);
            for(int i=0;i<middleCodeList.size();i++){
                Instruction m = middleCodeList.get(i);
                out.write(m.toString().getBytes("utf-8"));
                out.write("\r\n".getBytes("utf-8"));
               }
               out.close();
        }
        catch(Exception e){
            MyError.ShowErrMsg(2,"中间指令文件存放位置错误!");
        }

    }
    /**
    * 解释执行
    */
    public static void execute(){
        if(execute)
        {
            Execute execute=new Execute();
            execute.start(outPath);
        }
    }

/** 程序入口. */
  static final public void start() throws ParseException {
    if (jj_2_1(2)) {
      VariableDefinition(0);
    } else {
      ;
    }
callMainFunction();
    label_1:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_1;
      }
      FunctionDefinition();
    }
    MainFunction();
    jj_consume_token(0);
    if(advanceList.size()>0)
    {
        for(int i=0;i<advanceList.size();i++)
        {
              MyError.ShowErrMsg(4,"函数"+advanceList.get(i).getName()+"未定义！");
        }

      }
  }

/** 变量定义部分. */
  static final public void VariableDefinition(int Type) throws ParseException {Token s;
    jj_consume_token(INT_TOKEN);
    s = jj_consume_token(ID_TOKEN);
createSymbol(s,Type);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_TOKEN:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA_TOKEN);
      s = jj_consume_token(ID_TOKEN);
createSymbol(s,Type);
    }
    jj_consume_token(SEMICOLON_TOKEN);
createSymbolSpace(Type);
  }

/** 自定义函数定义 */
  static final public void FunctionDefinition() throws ParseException {Token s;
    int type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_TOKEN:{
      jj_consume_token(INT_TOKEN);
type = 1;
        returnFlagType = 1;
      s = jj_consume_token(ID_TOKEN);
      break;
      }
    case VOID_TOKEN:{
      jj_consume_token(VOID_TOKEN);
type = 0;
        returnFlagType = 0;
      s = jj_consume_token(ID_TOKEN);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN_TOKEN);
    jj_consume_token(RPAREN_TOKEN);
createFunction(s,type);
    PartProgram();
  }

/** 主函数部分 */
  static final public void MainFunction() throws ParseException {Token s;
    jj_consume_token(VOID_TOKEN);
    s = jj_consume_token(MAIN_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    jj_consume_token(RPAREN_TOKEN);
returnFlagType = 0;
        int mainAddress = middleCodeList.size();
        for(int i=0;i<middleCodeList.size();i++)
        {
            if(middleCodeList.get(i).instructionName==InstructionName.CAL)
            {
                 middleCodeList.get(i).a = mainAddress;
                 break;
            }
        }
        createFunction(s,0);
    PartProgram();
  }

/** 
 * 分程序部分
 * 如果分程序为void且没有返回值，则自动补上返回值（退栈语句）
 */
  static final public void PartProgram() throws ParseException {
    jj_consume_token(LBRACE_TOKEN);
returnFlag = false;
    if (jj_2_3(2)) {
      VariableDefinition(1);
    } else {
      ;
    }
    WordList();
    jj_consume_token(RBRACE_TOKEN);
if(!returnFlag&&returnFlagType==0){
            Instruction item = new Instruction(InstructionName.RET,0,0);
            middleCodeList.add(item);
        }
        else if(!returnFlag&&returnFlagType==1)
        {
            MyError.ShowErrMsg(4,"返回值类型为int的函数必须有返回值!");
        }
  }

/** 语句序列 */
  static final public void WordList() throws ParseException {
    Word();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_TOKEN:
      case WHILE_TOKEN:
      case SCANF_TOKEN:
      case PRINTF_TOKEN:
      case RETURN_TOKEN:
      case ID_TOKEN:
      case SEMICOLON_TOKEN:
      case LBRACE_TOKEN:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      Word();
    }
  }

/** 语句 */
  static final public void Word() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_TOKEN:{
      If_Word();
      break;
      }
    case WHILE_TOKEN:{
      For_Word();
      break;
      }
    case LBRACE_TOKEN:{
      jj_consume_token(LBRACE_TOKEN);
      WordList();
      jj_consume_token(RBRACE_TOKEN);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_4(2)) {
        DefinitionFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID_TOKEN:{
          Equals_Word();
          break;
          }
        case RETURN_TOKEN:{
          Return_Word();
returnFlag=true;
          break;
          }
        case SCANF_TOKEN:{
          Scanf_Word();
          break;
          }
        case PRINTF_TOKEN:{
          Printf_Word();
          break;
          }
        case SEMICOLON_TOKEN:{
          jj_consume_token(SEMICOLON_TOKEN);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/** 条件语句 */
  static final public void If_Word() throws ParseException {int jpcAdress;
    int jmpAdress;
    jj_consume_token(IF_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    Expression();
Instruction item = new Instruction(InstructionName.JPC,0,0);
        middleCodeList.add(item);
        jpcAdress = middleCodeList.size()-1;
    jj_consume_token(RPAREN_TOKEN);
    Word();
Instruction item2 = new Instruction(InstructionName.JMP,0,middleCodeList.size()+1);
        middleCodeList.add(item2);
        middleCodeList.get(jpcAdress).a = middleCodeList.size();
        jmpAdress = middleCodeList.size()-1;
    if (jj_2_5(2)) {
      jj_consume_token(ELSE_TOKEN);
      Word();
middleCodeList.get(jmpAdress).a = middleCodeList.size();
    } else {
      ;
    }
  }

/** 循环语句 */
  static final public void For_Word() throws ParseException {int whileBegin;
    int num;
    int whileEnd;
    jj_consume_token(WHILE_TOKEN);
whileBegin = middleCodeList.size();
    jj_consume_token(LPAREN_TOKEN);
    Expression();
Instruction item = new Instruction(InstructionName.JPC,0,whileBegin);
        middleCodeList.add(item);
        num=middleCodeList.size();
    jj_consume_token(RPAREN_TOKEN);
    Word();
Instruction item2 = new Instruction(InstructionName.JMP,0,whileBegin);
        middleCodeList.add(item2);
        whileEnd = middleCodeList.size();
        middleCodeList.get(num-1).a = whileEnd;
  }

/** 赋值语句*/
  static final public void Equals_Word() throws ParseException {Token t;
    //id = <表达式>;
        t = jj_consume_token(ID_TOKEN);
    jj_consume_token(EQUAL_TOKEN);
    Expression();
    jj_consume_token(SEMICOLON_TOKEN);
getVariableByName(t,1);
  }

/** 返回语句 */
  static final public void Return_Word() throws ParseException {int flag=0;
    jj_consume_token(RETURN_TOKEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN_TOKEN:{
      jj_consume_token(LPAREN_TOKEN);
      Expression();
flag = 1;
      jj_consume_token(RPAREN_TOKEN);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON_TOKEN);
if(returnFlagType==0&&flag==1){
            MyError.ShowErrMsg(4,"返回值为void类型的函数只能返回null");
        }else if(returnFlagType==1&&flag==0){
            MyError.ShowErrMsg(4,"返回值类型为int的函数必须有返回值!");
        }
        Instruction item = new Instruction(InstructionName.RET,0,0);
        middleCodeList.add(item);
  }

/** 读语句*/
  static final public void Scanf_Word() throws ParseException {Token t;
    jj_consume_token(SCANF_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    t = jj_consume_token(ID_TOKEN);
    jj_consume_token(RPAREN_TOKEN);
    jj_consume_token(SEMICOLON_TOKEN);
Instruction item = new Instruction(InstructionName.RED,0,0);
        middleCodeList.add(item);
        getVariableByName(t,1);
  }

/** 写语句 */
  static final public void Printf_Word() throws ParseException {
    jj_consume_token(PRINTF_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID_TOKEN:
    case NUM_TOKEN:
    case PLUS_TOKEN:
    case MINUS_TOKEN:
    case LPAREN_TOKEN:{
      Expression();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN_TOKEN);
    jj_consume_token(SEMICOLON_TOKEN);
Instruction item = new Instruction(InstructionName.WRT,0,0);
        middleCodeList.add(item);
  }

/** 表达式*/
  static final public void Expression() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_TOKEN:
    case MINUS_TOKEN:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_TOKEN:{
        jj_consume_token(PLUS_TOKEN);
numflag=true;
        break;
        }
      case MINUS_TOKEN:{
        jj_consume_token(MINUS_TOKEN);
numflag=false;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_TOKEN:
      case MINUS_TOKEN:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_TOKEN:{
        t = jj_consume_token(PLUS_TOKEN);
        break;
        }
      case MINUS_TOKEN:{
        t = jj_consume_token(MINUS_TOKEN);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
if(t.image.equals("+")){
            Instruction item = new Instruction(InstructionName.ADD,0,0);
            middleCodeList.add(item);
        }else{
            Instruction item = new Instruction(InstructionName.SUB,0,0);
            middleCodeList.add(item);
        }
    }
  }

/** 项*/
  static final public void Term() throws ParseException {Token t;
    Factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES_TOKEN:
      case DIVIDE_TOKEN:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES_TOKEN:{
        t = jj_consume_token(TIMES_TOKEN);
        break;
        }
      case DIVIDE_TOKEN:{
        t = jj_consume_token(DIVIDE_TOKEN);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
if(t.image.equals("*")){
                Instruction item = new Instruction(InstructionName.MUL,0,0);
                middleCodeList.add(item);
            }else{
                Instruction item = new Instruction(InstructionName.DIV,0,0);
                middleCodeList.add(item);
            }
    }
  }

/** 因子 */
  static final public void Factor() throws ParseException {Token s;
    if (jj_2_6(2)) {
      DefinitionFunction();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN_TOKEN:{
        jj_consume_token(LPAREN_TOKEN);
        Expression();
        jj_consume_token(RPAREN_TOKEN);
        break;
        }
      case NUM_TOKEN:{
        s = jj_consume_token(NUM_TOKEN);
Instruction item=null;
        if(numflag)
        {
            item = new Instruction(InstructionName.LIT,0,Integer.parseInt(s.image));
        }
        else
        {
            item = new Instruction(InstructionName.LIT,0,-Integer.parseInt(s.image));
        }
        numflag=true;
        middleCodeList.add(item);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        if (jj_2_7(2)) {
          s = jj_consume_token(ID_TOKEN);
getVariableByName(s,0);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/** 自定义函数调用 */
  static final public void DefinitionFunction() throws ParseException {Token t;
    //id '(' ')'
        t = jj_consume_token(ID_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    jj_consume_token(RPAREN_TOKEN);
getFunctionByName(t);
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(SCANF_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(VOID_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    if (jj_scan_token(INT_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(WHILE_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(LBRACE_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(RETURN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(ELSE_TOKEN)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    if (jj_scan_token(INT_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_scan_token(PRINTF_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    if (jj_scan_token(ID_TOKEN)) return true;
    if (jj_scan_token(LPAREN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(IF_TOKEN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0xc0,0x827c20,0x800420,0x27800,0x2000000,0x20cc000,0xc0000,0xc0000,0xc0000,0xc0000,0x300000,0x300000,0x2008000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
