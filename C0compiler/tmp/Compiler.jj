PARSER_BEGIN(Compiler)
package Compiler;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Scanner;
import Execute.*;
import java.io.FileNotFoundException;
//java -cp bootstrap/javacc.jar javacc xxx.jj.
public class Compiler {
    /** 全局变量*/
    public static ArrayList<SymbolItem> outList = new ArrayList();
    /** 函数及其变量*/
    public static ArrayList<ArrayList<SymbolItem>> partList = new ArrayList();
    /** 超前调用函数表*/
    public static ArrayList<SymbolItem> advanceList = new ArrayList();
    /** 中间指令序列 */
    public static ArrayList<Instruction> middleCodeList = new ArrayList();
    /** 返回标志 */
    public static boolean returnFlag = false;
    public static int returnFlagType = 0;
    private static boolean mid=false;
    private static boolean sub_program=false;
    private static boolean execute=false;
    private static String outPath="";
     private static boolean numflag=true;
    /** Main entry point. */
    public static void main(String args[]) throws ParseException {
        try {
            System.out.println("欢迎使用C0编译器,请输入源代码地址:");
            Scanner scanner=new Scanner(System.in);
            String s=scanner.nextLine();
            InputStream inputstream = new FileInputStream(s);
            Compiler compiler = new Compiler(inputstream);
            try {
                String result="";
                while(!result.equals("y")&&!result.equals("Y")&&!result.equals("n")&&!result.equals("N"))
                {
                    System.out.println("是否输出中间代码？:y/n");
                    result=scanner.nextLine();
                    if(result.equals("y")||result.equals("Y"))
                    {
                        mid=true;
                    }
                    else if(result.equals("n")||result.equals("N"))
                    {
                        mid=false;
                    }
                    else
                    {
                        System.out.println("输入错误，请重新输入！");
                    }
                }
                result="";
                while(!result.equals("y")&&!result.equals("Y")&&!result.equals("n")&&!result.equals("N"))
                {
                    System.out.println("是否输出分程序列表？:y/n");
                    result=scanner.nextLine();
                    if(result.equals("y")||result.equals("Y"))
                    {
                        sub_program=true;
                    }
                    else if(result.equals("n")||result.equals("N"))
                    {
                        sub_program=false;
                    }
                    else
                    {
                        System.out.println("输入错误，请重新输入！");
                    }
                }
                result="";
                while(!result.equals("y")&&!result.equals("Y")&&!result.equals("n")&&!result.equals("N"))
                {
                    System.out.println("是否直接解释执行?:y/n");
                    result=scanner.nextLine();
                    if(result.equals("y")||result.equals("Y"))
                    {
                       execute=true;
                    }
                    else if(result.equals("n")||result.equals("N"))
                    {
                        execute=false;
                    }
                    else
                    {
                        System.out.println("输入错误，请重新输入！");
                    }
                }
                System.out.println("请输入目标文件输出路径:");
                outPath=scanner.nextLine();
                compiler.start();
                if(!MyError.errFlag)
                {
                    outPutMiddleCodeList();
                    outPutPartList();
                    writeMiddleCodeList();
                    System.out.println("编译完成!");
                    execute();
                }

            }
            catch (ParseException e)
            {
                System.err.println(e);
            }
        }
        catch (FileNotFoundException e){
            MyError.ShowErrMsg(2,"目标文件不存在!");
        }
    }
    /**
    * 创建变量
    * @param type 0-全局变量 1-函数内部变量
    */
    public static void createSymbol(Token t,int type){
        SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.intSym);
        symbolItem.setName(t.image);
        symbolItem.setLevel(type);
        if(type==0){
            for(int i=0;i<outList.size();i++){
                if(outList.get(i).getName().equals(symbolItem.getName())){
                    MyError.ShowErrMsg(3,"变量["+symbolItem.getName()+"]已经定义！");
                }
            }
            outList.add(symbolItem);
        }
        else{
            ArrayList<SymbolItem> fun=partList.get(partList.size()-1);
               for(int i=0;i<fun.size();i++){
                   if(fun.get(i).getName().equals(symbolItem.getName())){
                       MyError.ShowErrMsg(3,"变量["+symbolItem.getName()+"]已经定义！");
                   }
               }
               fun.add(symbolItem);
           }
       }
    /**
    * 创建函数并检查超前调用
    * @param type 1-return int  0-return void
    */
    public static void createFunction(Token t,int type){
        SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
        symbolItem.setName(t.image);
        symbolItem.setReturnType(type);
        symbolItem.setAdr(middleCodeList.size());
        ArrayList<SymbolItem> list=new ArrayList();
        list.add(symbolItem);
        partList.add(list);
        for(int i=0;i<advanceList.size();i++){
            if(advanceList.get(i).getName().equals(t.image)){
                SymbolItem sym = advanceList.get(i);
                middleCodeList.get(sym.getAdr()).a = middleCodeList.size();
                advanceList.remove(i);
                i--;
            }
        }
    }
     /**
     * 生成开辟空间指令
     * @param type 0-全局变量 1-函数内部变量
     */
    public static void createSymbolSpace(int type){
        if(type==0){
            Instruction item = new Instruction(InstructionName.INT,0,outList.size());
            middleCodeList.add(item);
        }else{
            ArrayList<SymbolItem> list=partList.get(partList.size()-1);
            Instruction item = new Instruction(InstructionName.INT,0,list.size()-1);
            middleCodeList.add(item);
        }
    }
     /**
     * 根据名字查找变量并生成操作指令
     * @param type 0-取变量 1-存变量
     */
    public static void getVariableByName(Token t, int type){
        String id = t.image;
        boolean isFind = false;
        int relative = 1;
        ArrayList<SymbolItem> fun=partList.get(partList.size()-1);
        for(int i=0;i<fun.size();i++){
            relative++;
            if(fun.get(i).getName().equals(id)){
                isFind = true;
                break;
            }
        }
        if(isFind){
            if(type==0){
                Instruction item = new Instruction(InstructionName.LOD,0,relative-1);
                middleCodeList.add(item);
            }else{
                Instruction item = new Instruction(InstructionName.STO,0,relative-1);
                middleCodeList.add(item);
            }
        }else{
            relative=-1;
            for(int i=0;i<outList.size();i++){
                relative++;
                if(outList.get(i).getName().equals(id)){
                    if(type==0){
                        Instruction item = new Instruction(InstructionName.LOD,1,relative);
                        middleCodeList.add(item);
                    }else{
                        Instruction item = new Instruction(InstructionName.STO,1,relative);
                        middleCodeList.add(item);
                    }
                    return;
                }
            }
            MyError.ShowErrMsg(3,"变量["+id+"]不存在");
        }
    }
    /**
    * 根据函数名字查找函数并生成调用函数指令
    */
    public static void getFunctionByName(Token t){
        for(int i=0;i<partList.size();i++){
           ArrayList<SymbolItem> fun=partList.get(i);
           if(fun.get(0).getName().equals(t.image)){
               Instruction Instruction = new Instruction(InstructionName.CAL,0,fun.get(0).getAdr());
               middleCodeList.add(Instruction);
               return;
           }
        }
        //如果单词表中没有该函数，则进行超前调用
        SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
        symbolItem.setName(t.image);
        symbolItem.setAdr(middleCodeList.size());
        advanceList.add(symbolItem);
        Instruction Instruction = new Instruction(InstructionName.CAL,0,0);
        middleCodeList.add(Instruction);
    }
    /**
    * 全局变量定义完调用主函数
    */
    public static void callMainFunction(){
        Instruction item = new Instruction(InstructionName.CAL,0,0);
        middleCodeList.add(item);
        Instruction item2 = new Instruction(InstructionName.RET,0,0);
        middleCodeList.add(item2);
    }
     /**
     * 输出中间指令至屏幕
     */
    public static void outPutMiddleCodeList(){
        if(mid)
        {
            System.out.println("编译生成的中间代码序列如下:");
            for(int i=0;i<middleCodeList.size();i++){
                Instruction m = middleCodeList.get(i);
                System.out.println("**"+i+"\t"+m.toOutString());
            }
        }
    }
    /**
    * 输出分程序列表
    */
    public static void outPutPartList(){
        if(sub_program)
        {
            System.out.println("分程序序列表如下:");
            for(int i=0;i<partList.size();i++)
            {
                System.out.println("----Function"+i+":");
                ArrayList<SymbolItem> fun=partList.get(i);
                for(int j=0;j<fun.size();j++){
                    System.out.println("--"+j+"\t"+fun.get(j).toString());
                }
            }
        }
    }
    /**
    * 输出目标代码
    */
    public static void writeMiddleCodeList(){
        FileOutputStream out;
        try{
            out = new FileOutputStream(outPath);
            for(int i=0;i<middleCodeList.size();i++){
                Instruction m = middleCodeList.get(i);
                out.write(m.toString().getBytes("utf-8"));
                out.write("\r\n".getBytes("utf-8"));
               }
               out.close();
        }
        catch(Exception e){
            MyError.ShowErrMsg(2,"中间指令文件存放位置错误!");
        }

    }
    /**
    * 解释执行
    */
    public static void execute(){
        if(execute)
        {
            Execute execute=new Execute();
            execute.start(outPath);
        }
    }
}
PARSER_END(Compiler)

/** 空字符过滤 */
SKIP:
{
" " | "\t" | "\n" | "\r"
}
/** 多行注释过滤 */
SKIP :
{
  "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

/** TOKEN定义 */
TOKEN:
{
    <IF_TOKEN : "if">
    |
    <INT_TOKEN : "int">
    |
    <VOID_TOKEN : "void">
    |
    <ELSE_TOKEN : "else">
    |
    <MAIN_TOKEN : "main">
    |
    <WHILE_TOKEN : "while">
    |
    <SCANF_TOKEN : "scanf">
    |
    <PRINTF_TOKEN : "printf">
    |
    <RETURN_TOKEN : "return">
    |
    <ID_TOKEN : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
    |
    <NUM_TOKEN : (["0"-"9"])+>
    |
    <COMMA_TOKEN: ",">
    |
    <SEMICOLON_TOKEN: ";">
    |
    <PLUS_TOKEN: "+">
    |
    <MINUS_TOKEN: "-">
    |
    <TIMES_TOKEN: "*">
    |
    <DIVIDE_TOKEN: "/">
    |
    <EQUAL_TOKEN: "=">
    |
    <LBRACE_TOKEN: "{">
    |
    <RBRACE_TOKEN: "}">
    |
    <LPAREN_TOKEN: "(">
    |
    <RPAREN_TOKEN: ")">
}
/** 程序入口. */
void start() :
{}
{
    //[<变量定义部分>] {<自定义函数定义部分>} <主函数>
    [LOOKAHEAD(2)VariableDefinition(0)]
    {
            callMainFunction();
    }
    ( LOOKAHEAD(2)FunctionDefinition() )*
    MainFunction() 
    <EOF>
    {
        if(advanceList.size()>0)
        {
            for(int i=0;i<advanceList.size();i++)
            {
                MyError.ShowErrMsg(4,"函数"+advanceList.get(i).getName()+"未定义！");
            }

        }
    }
}

/** 变量定义部分. */
void VariableDefinition(int Type) :
{
    Token s;
}
{
    //int id {, id};
    <INT_TOKEN>
    s=<ID_TOKEN>{
        createSymbol(s,Type);
    }
    (<COMMA_TOKEN>
    s=<ID_TOKEN>{
        createSymbol(s,Type);
    })* <SEMICOLON_TOKEN>{
        createSymbolSpace(Type);
    }
}

/** 自定义函数定义部分. */
void FunctionDefinition() :
{
    Token s;
    int type;
}
{
    //( int id | void id) '(' ')' <分程序>
    (<INT_TOKEN>
    {
        type = 1;
        returnFlagType = 1;
    } 
    s=<ID_TOKEN>
    |
     <VOID_TOKEN>
    {
        type = 0;
        returnFlagType = 0;
    } s=<ID_TOKEN>) 
    <LPAREN_TOKEN> <RPAREN_TOKEN>
    {
        createFunction(s,type);
    }
    PartProgram()
}

/** 主函数部分 */
void MainFunction() :
{
    Token s;
}
{
    //void main'(' ')' <分程序>
    <VOID_TOKEN> s=<MAIN_TOKEN> <LPAREN_TOKEN> <RPAREN_TOKEN>
    {
        returnFlagType = 0;
        int mainAddress = middleCodeList.size();
        for(int i=0;i<middleCodeList.size();i++)
        {
            if(middleCodeList.get(i).instructionName==InstructionName.CAL)
            {
                 middleCodeList.get(i).a = mainAddress;
                 break;
            }
        }
        createFunction(s,0);
    }
    PartProgram()
}

/** 
 * 分程序部分
 * 如果分程序为void且没有返回值，则自动补上返回值（退栈语句）
 */
void PartProgram():
{}
{
    //'{' [<变量定义部分>] <语句序列> '}'
    <LBRACE_TOKEN>
    {
        returnFlag = false;
    } 
    [LOOKAHEAD(2)VariableDefinition(1)] WordList()
    <RBRACE_TOKEN>
    {
        if(!returnFlag&&returnFlagType==0){
            Instruction item = new Instruction(InstructionName.RET,0,0);
            middleCodeList.add(item);
        }
        else if(!returnFlag&&returnFlagType==1)
        {
            MyError.ShowErrMsg(4,"返回值类型为int的函数必须有返回值!");
        }
    }
}

/** 语句序列 */
void WordList():
{}
{
    //<语句> {<语句>}
    Word()(Word())*
}

/** 语句 */
void Word():
{}
{
    //<条件语句>｜<循环语句> | '{'<语句序列>'}' | <自定义函数调用语句> |
    //<赋值语句> | <返回语句> | <读语句> | <写语句> | ;
    If_Word()
    |
    For_Word()
    |
    <LBRACE_TOKEN> WordList() <RBRACE_TOKEN>
    |
    LOOKAHEAD(2)DefinitionFunction()
    |
    Equals_Word()
    |
    Return_Word(){returnFlag=true;}
    |
    Scanf_Word()
    |
    Printf_Word()
    |
    <SEMICOLON_TOKEN>
}

/** 条件语句 */
void If_Word():
{
    int jpcAdress;
    int jmpAdress;
}
{
    //if '('<表达式>')' <语句> [else <语句> ]
    <IF_TOKEN> <LPAREN_TOKEN> 
    Expression()
    {
        Instruction item = new Instruction(InstructionName.JPC,0,0);
        middleCodeList.add(item);
        jpcAdress = middleCodeList.size()-1;
    }
    <RPAREN_TOKEN> 
    Word()
    {
        Instruction item2 = new Instruction(InstructionName.JMP,0,middleCodeList.size()+1);
        middleCodeList.add(item2);
        middleCodeList.get(jpcAdress).a = middleCodeList.size();
        jmpAdress = middleCodeList.size()-1;
    }
    [LOOKAHEAD(2)<ELSE_TOKEN> Word()
    {
        middleCodeList.get(jmpAdress).a = middleCodeList.size();
    }
    ]
}

/** 循环语句 */
void For_Word():
{
    int whileBegin;
    int num;
    int whileEnd;
}
{
    //while '(' <表达式>')' <语句>
    <WHILE_TOKEN>
    {
        whileBegin = middleCodeList.size();
    }
    <LPAREN_TOKEN> Expression()
    {
        Instruction item = new Instruction(InstructionName.JPC,0,whileBegin);
        middleCodeList.add(item);
        num=middleCodeList.size();
    }
    <RPAREN_TOKEN> Word()
    {
        Instruction item2 = new Instruction(InstructionName.JMP,0,whileBegin);
        middleCodeList.add(item2);
        whileEnd = middleCodeList.size();
        middleCodeList.get(num-1).a = whileEnd;
    }
}

/** 赋值语句 */
void Equals_Word():
{
    Token t;
}
{
    //id = <表达式>;
    t=<ID_TOKEN> <EQUAL_TOKEN> Expression() <SEMICOLON_TOKEN>{
        getVariableByName(t,1);
    }
}

/** 返回语句 */
void Return_Word():
{
    int flag=0;
}
{
    //return ['(' <表达式> ')'] ;
    <RETURN_TOKEN> [<LPAREN_TOKEN> Expression()
    {
        flag = 1;
    }
    <RPAREN_TOKEN>] <SEMICOLON_TOKEN>{
        if(returnFlagType==0&&flag==1){
            MyError.ShowErrMsg(4,"返回值为void类型的函数只能返回null");
        }else if(returnFlagType==1&&flag==0){
            MyError.ShowErrMsg(4,"返回值类型为int的函数必须有返回值!");
        }
        Instruction item = new Instruction(InstructionName.RET,0,0);
        middleCodeList.add(item);
    }
}

/** 读语句 */
void Scanf_Word():
{
    Token t;
}
{
    //scanf '(' id ')';
    <SCANF_TOKEN> <LPAREN_TOKEN> t=<ID_TOKEN> <RPAREN_TOKEN> <SEMICOLON_TOKEN>{
        Instruction item = new Instruction(InstructionName.RED,0,0);
        middleCodeList.add(item);
        getVariableByName(t,1);
    }
}

/** 写语句 */
void Printf_Word():
{}
{
    // printf '(' [ <表达式>] ')';
    <PRINTF_TOKEN> <LPAREN_TOKEN> [Expression()] <RPAREN_TOKEN> <SEMICOLON_TOKEN>{
        Instruction item = new Instruction(InstructionName.WRT,0,0);
        middleCodeList.add(item);
    }
}

/** 表达式 */
void Expression():
{
    Token t;
}
{
    //[+｜-] <项> { (+｜-) <项>}
    [<PLUS_TOKEN>
    {
        numflag=true;
    }
    |
    <MINUS_TOKEN>
    {
        numflag=false;
    }
    ] Term() ( (
    t=<PLUS_TOKEN>|t=<MINUS_TOKEN>) Term()
    {
        if(t.image.equals("+")){
            Instruction item = new Instruction(InstructionName.ADD,0,0);
            middleCodeList.add(item);
        }else{
            Instruction item = new Instruction(InstructionName.SUB,0,0);
            middleCodeList.add(item);
        }
    })*
}

/** 项 */
void Term():
{
    Token t;
}
{
    //<因子>｛(*｜/) <因子>｝
     Factor() ( (
        t=<TIMES_TOKEN>|t=<DIVIDE_TOKEN>)  Factor()
        {
            if(t.image.equals("*")){
                Instruction item = new Instruction(InstructionName.MUL,0,0);
                middleCodeList.add(item);
            }else{
                Instruction item = new Instruction(InstructionName.DIV,0,0);
                middleCodeList.add(item);
            }
        })*
}

/** 因子 */
void Factor():
{
    Token s;
}
{
    //<自定义函数调用> | '(' <表达式>')' | num | id
    LOOKAHEAD(2)DefinitionFunction()
    |
    <LPAREN_TOKEN> Expression() <RPAREN_TOKEN>
    |
    s=<NUM_TOKEN>{
        Instruction item=null;
        if(numflag)
        {
            item = new Instruction(InstructionName.LIT,0,Integer.parseInt(s.image));
        }
        else
        {
            item = new Instruction(InstructionName.LIT,0,-Integer.parseInt(s.image));
        }
        numflag=true;
        middleCodeList.add(item);
    }
    |
    LOOKAHEAD(2)s=<ID_TOKEN>
    {
        getVariableByName(s,0);
    }
}


/** 自定义函数调用 */
void DefinitionFunction():
{
    Token t;
}
{
    //id '(' ')'
    t=<ID_TOKEN> <LPAREN_TOKEN> <RPAREN_TOKEN>
    {
        getFunctionByName(t);
    }
}